version: '3.8'

services:
  # API Gateway (NGINX) - The single entry point
  nginx:
    build: ./nginx
    container_name: api_gateway
    ports:
      - "8080:80"
    depends_on:
      - user-service
      - auth-service
      - tracking-service
      - frontend

  # User Service
  user-service:
    build: ./services/user-service
    container_name: user_service
    environment:
      DB_USER: user
      DB_PASSWORD: password
      DB_HOST: postgres_db
      DB_NAME: cargo_db
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy

  # Auth Service
  auth-service:
    build: ./services/auth-service
    container_name: auth_service
    environment:
      DB_USER: user
      DB_PASSWORD: password
      DB_HOST: postgres_db
      DB_NAME: cargo_db
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy

  tracking-service:
    build: ./services/tracking-service
    container_name: tracking_service
    environment:
      DB_USER: user
      DB_PASSWORD: password
      DB_HOST: postgres_db
      DB_NAME: cargo_db
      DB_PORT: 5432
    depends_on:
      postgres:
        condition: service_healthy

  # Our PostgreSQL Database Service
  postgres:
    image: postgres:13-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cargo_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d cargo_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Broker Service (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  update-service:
    build: ./services/update-service
    container_name: update_service
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    depends_on:
      rabbitmq:
        condition: service_healthy

  notification-service:
    build: ./services/notification-service
    container_name: notification_service
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    depends_on:
      rabbitmq:
        condition: service_healthy

  # Frontend Service
  frontend:
    build: ./frontend
    container_name: frontend_service
    
  
volumes:
  postgres_data:
  rabbitmq_data: