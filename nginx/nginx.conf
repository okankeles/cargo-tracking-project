events {}

http {
    # Backend servislerimizin lokasyonları (upstream tanımları)
    # Bu tanımlar, NGINX'in servis adlarını çözmesine yardımcı olur.
    upstream user_service {
        server user_service:3000;
    }
    upstream tracking_service {
        server tracking_service:3002;
    }
    upstream update_service {
        server update_service:3003;
    }

    # Frontend uygulamamızın lokasyonu
    upstream frontend_app {
        server frontend_service:80;
    }

    server {
        # NGINX, dış dünyadan gelen istekleri 80 portunda dinleyecek
        listen 80;

        # ------------------- API YÖNLENDİRME KURALLARI -------------------
        # /api/users/ ile başlayan istekler user_service'e yönlendirilir.
        # Sondaki / işareti, URL'nin geri kalanının da doğru şekilde iletilmesini sağlar.
        location /api/users/ {
            proxy_pass http://user_service/;
        }
        
        # /api/tracking/ ile başlayan istekler tracking_service'e yönlendirilir.
        location /api/tracking/ {
            proxy_pass http://tracking_service/;
        }

        # /api/updates/ ile başlayan istekler update_service'e yönlendirilir.
        location /api/updates/ {
            proxy_pass http://update_service/;
        }

        # ------------------- FRONTEND YÖNLENDİRME KURALI -------------------
        # Yukarıdaki API kurallarına uymayan diğer TÜM istekler
        # frontend uygulamasına yönlendirilir.
        location / {
            proxy_pass http://frontend_app;

            # Bu başlıklar, frontend'den gelen istek bilgilerinin
            # (host, IP adresi vb.) bozulmadan iletilmesi için önemlidir.
            # Özellikle WebSocket gibi teknolojiler kullanıldığında kritik hale gelir.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}